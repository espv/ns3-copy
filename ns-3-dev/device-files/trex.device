#
# Lines starting with "#" are regarded as comments, and disregarded during parsing.
#
# The order of sections matter - they must be in the following order:
# QUEUES, HARDWARE, SYNCH, CONDITIONS, TRIGGERS,
# {SIGSTART ... SIGEND},
# THREADS
#

#############################################################################
############################### HEADER ######################################
#############################################################################

CEPENABLED

QUEUES
# Format: name
#	  queuing policy (only currently supported: "FIFO")
#	  size
#	  type of queued entries ("packet" or "service")
# order matters, since queue conditions work on sets of queues specified
# by the name of the first and the last queue

# BCM4430 TRS: http://linux-sunxi.org/images/0/05/4330-DS206-R.pdf
# Page 84, figure 34
# NIC Rx memory: 10kb
# NIC Tx memory: 32kb

HIRQ	            FIFO 	-1    services
cepops	            FIFO 	-1    services
then-cepops         FIFO 	-1    services
or-cepops           FIFO 	-1    services
and-cepops          FIFO 	-1    services
sequence-fsms	    FIFO 	-1    fsms
and-sequence-queue      FIFO    -1    and-fsm-queues
or-sequence-queue      FIFO    -1    or-fsm-queues
then-sequence-queue      FIFO    -1    then-fsm-queues

nic_rx FIFO -1 bytes

h1-h2 FIFO -1 packets
h2-h3 FIFO -1 packets
h3-h4 FIFO -1 packets
h4-h5 FIFO -1 packets
h3-bytes FIFO -1 packets
h12-h14 FIFO -1 packets
h11-h12 FIFO -1 packets
h4-rcvd FIFO -1 packets
rcvd-send FIFO -1 packets
send-bytes FIFO -1 packets
ip-bytes FIFO -1 packets
send-senddone FIFO -1 packets
h8-h9 FIFO -1 packets
h9-h10 FIFO -1 packets
etq-etq FIFO -1 packets

send-queue FIFO -1 packets

event-queue FIFO -1 cepevents




# Queue for posted tasks
softirq::hi             FIFO   -1   services
softirq::receive        FIFO    -1   services
softirq::send           FIFO    -1   services
softirq::sendDone       FIFO    -1   services
softirq::gotosleep      FIFO    -1 services
softirq::hrtimer        FIFO   -1   services

HARDWARE
# Format: MEMBUS||PEU frequency [name if PEU] [scheduler if PEU] [trace overhead] [callback service queue]
PEU 4 cpu0 ns3::processing::RoundRobinScheduler 250 irq_enter HIRQ

SYNCH
# name type arguments
# type 0 is a semaphore
process_event_SEM 0 0

CONDITIONS

TRIGGERS
LOC send_event_loc do_send_event
LOC received_event_loc received_event

LOC process-or-cepop-loc loc-process-or-cepop
LOC process-and-cepop-loc loc-process-and-cepop
LOC process-then-cepop-loc loc-process-then-cepop
LOC process-cepop-loc loc-process-cepop

# Entrypoint function for the PEU defined above
SIGSTART
NAME irq_enter
PEU cpu
RESOURCES cycles normal
FRACTION 50%  1940 3880

0 START
x                      DEQUEUE		SRVQUEUE 0 HIRQ
0 STOP

SIGEND


SIGSTART
NAME process_received_packet
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x PROCESS 1000 0
0 STOP

SIGEND


SIGSTART
NAME HIRQ-1 # Receiving part
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
#x TTWAKEUP packet_thread
x CALL process_received_packet
x TTWAKEUP event_thread
0 STOP

SIGEND


SIGSTART
NAME send_event # Sending part
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
#send_event_loc DEQUEUE PKTQUEUE 0 h3
0 STOP

SIGEND


SIGSTART
NAME packet_processing_thread  # Wake up when packet is received
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x QUEUECOND h1-h2 h1-h2 empty
x SLEEPTHREAD
0 STOP

SIGEND


SIGSTART
NAME packet_processing_thread  # Wake up when packet is received
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x QUEUECOND h1-h2 h1-h2 notempty
x CALL process_received_packet
x TTWAKEUP event_thread
x SLEEPTHREAD
#x CALL send_event
0 STOP

SIGEND


SIGSTART
NAME add-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x PROCESS 1000 0
0 STOP

SIGEND


SIGSTART
NAME HIRQ-2
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND andCepOpDoneYet write global 1
x STATECOND orCepOpDoneYet write global 1
x STATECOND thenCepOpDoneYet write global 1
0 STOP

SIGEND


SIGSTART
NAME HIRQ-3
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND andCepOpDoneYet write global 0
x STATECOND orCepOpDoneYet write global 0
x STATECOND thenCepOpDoneYet write global 0
0 STOP

SIGEND


SIGSTART
NAME process-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND cepOpDoneYet read global 0
0 STOP

SIGEND


SIGSTART
NAME process-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND cepOpDoneYet read global 1
process-cepop-loc DEQUEUE PKTQUEUE 0 h2-h3
x PROCESS 1000 0
x CALL process-cepop
0 STOP

SIGEND


SIGSTART
NAME process-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND cepOpDoneYet read global 2
x PROCESS 1000 0
process-cepop-loc DEQUEUE PKTQUEUE 0 h2-h3
x PROCESS 2000 0
x CALL process-cepop
0 STOP

SIGEND


SIGSTART
NAME process-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND cepOpDoneYet read global 3
x PROCESS 1000 0
process-cepop-loc DEQUEUE PKTQUEUE 0 h2-h3
x PROCESS 3000 0
x CALL process-cepop
0 STOP

SIGEND


SIGSTART
NAME process-then-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x PROCESS 1000 0
process-then-cepop-loc DEQUEUE PKTQUEUE 0 h2-h3
x STATECOND thenCepOpDoneYet read global 1
0 STOP

SIGEND


SIGSTART
NAME process-then-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x PROCESS 1000 0
process-then-cepop-loc DEQUEUE PKTQUEUE 0 h2-h3
x STATECOND thenCepOpDoneYet read global 0
x CALL process-then-cepop
0 STOP

SIGEND


SIGSTART
NAME process-or-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x PROCESS 1000 0
process-or-cepop-loc DEQUEUE PKTQUEUE 0 h3-h4
x STATECOND orCepOpDoneYet read global 1
0 STOP

SIGEND


SIGSTART
NAME process-or-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x PROCESS 1000 0
process-or-cepop-loc DEQUEUE PKTQUEUE 0 h3-h4
x STATECOND orCepOpDoneYet read global 0
x CALL process-or-cepop
0 STOP

SIGEND


SIGSTART
NAME process-and-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
insert-event PROCESS 1200 0
process-and-cepop-loc DEQUEUE PKTQUEUE 0 h4-h5
x STATECOND andCepOpDoneYet read global 1
0 STOP

SIGEND


SIGSTART
NAME process-and-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
insert-event PROCESS 1200 0
process-and-cepop-loc DEQUEUE PKTQUEUE 0 h4-h5
x STATECOND andCepOpDoneYet read global 0
x CALL process-and-cepop
0 STOP

SIGEND


SIGSTART
NAME insert_event_into_cepops
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 LOOPSTART		0 cepops cepops 0
x DEQUEUE SRVQUEUE 0 0  # Execute process-and-cepop, process-then-cepop or process-or-cepop
0 RESTART

SIGEND


SIGSTART
NAME populate-then-cepops
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 LOOPSTART		0 then-cepops then-cepops 0
x                  ENQUEUE		SRVQUEUE process-then-cepop cepops
0 RESTART

SIGEND


SIGSTART
NAME populate-or-cepops
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 LOOPSTART		0 or-cepops or-cepops 0
x                  ENQUEUE		SRVQUEUE process-or-cepop cepops
0 RESTART

SIGEND


SIGSTART
NAME populate-and-cepops
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 LOOPSTART		0 and-cepops and-cepops 0
x                  ENQUEUE		SRVQUEUE process-and-cepop cepops
0 RESTART

SIGEND


SIGSTART
NAME populate-cepops
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x LOOP populate-and-cepops 0 and-cepops and-cepops 0
x LOOP populate-or-cepops 0 or-cepops or-cepops 0
x LOOP populate-then-cepops 0 then-cepops then-cepops 0
0 STOP

SIGEND


SIGSTART
NAME event_processing_thread
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x QUEUECOND h1-h2 h1-h2 empty
x SLEEPTHREAD
0 STOP

SIGEND


SIGSTART
NAME handle-or-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
# x STATECOND SequencesLeft read global 1
# x STATECOND InsertedSequence read global 1
# x CALL handle-or-cepop
# x ELSEIF InsertedSequence read global 0
# x ENDIF
# x ENDIF
x STATECOND SequencesLeft read global 1
x STATECOND InsertedSequence read global 1
x CALL handle-or-cepop
0 STOP

SIGEND

SIGSTART
NAME handle-or-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND SequencesLeft read global 1
x STATECOND InsertedSequence read global 1
x CALL handle-or-cepop
0 STOP

SIGEND


SIGSTART
NAME handle-or-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND SequencesLeft read global 0
0 STOP

SIGEND


SIGSTART
NAME handle-and-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND SequencesLeft read global 1
x STATECOND InsertedSequence read global 1
x CALL handle-and-cepop
0 STOP

SIGEND

SIGSTART
NAME handle-and-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND SequencesLeft read global 1
x STATECOND InsertedSequence read global 1
x CALL handle-and-cepop
0 STOP

SIGEND


SIGSTART
NAME handle-and-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND SequencesLeft read global 0
0 STOP

SIGEND


SIGSTART
NAME handle-then-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND SequencesLeft read global 1
x STATECOND InsertedSequence read global 1
x CALL handle-then-cepop
0 STOP

SIGEND

SIGSTART
NAME handle-then-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND SequencesLeft read global 1
x STATECOND InsertedSequence read global 1
x CALL handle-then-cepop
0 STOP

SIGEND


SIGSTART
NAME handle-then-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND SequencesLeft read global 0
0 STOP

SIGEND


SIGSTART
NAME handle-cepops
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
received_event_loc DEQUEUE PKTQUEUE 0 h1-h2
x STATECOND CepOpsLeft read global 1
x STATECOND CepOpType read global 0
x CALL handle-or-cepop
x CALL handle-cepops
0 STOP

SIGEND

SIGSTART
NAME handle-cepops
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
received_event_loc DEQUEUE PKTQUEUE 0 h1-h2
x STATECOND CepOpsLeft read global 1
x STATECOND CepOpType read global 1
x CALL handle-and-cepop
x CALL handle-cepops
0 STOP

SIGEND

SIGSTART
NAME handle-cepops
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
received_event_loc DEQUEUE PKTQUEUE 0 h1-h2
x STATECOND CepOpsLeft read global 1
x STATECOND CepOpType read global 2
x CALL handle-then-cepop
x CALL handle-cepops
0 STOP

SIGEND


SIGSTART
NAME handle-cepops
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
received_event_loc DEQUEUE PKTQUEUE 0 h1-h2
x STATECOND CepOpsLeft read global 0
0 STOP

SIGEND


SIGSTART
NAME event_processing_thread
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x QUEUECOND h1-h2 h1-h2 notempty
#x PROCESS 8000000 0
# Which CEPOp belongs to the thread is customizable and depends on the system being modeled.
# In T-Rex, CepOps are delegated to each core to maximize CPU utilization.
# Perhaps we need another event called ADDCEPOP that adds a CEPOp in whichever way the modeled system does.
# Additionally, REMOVECEPOP can be useful.
#x HANDLEINCOMINGCEPEVENT 1000 0 2000 0  # 1000 cycles per state machine, 2000 cycles per CEPOp
x CALL handle-cepops
#x CALL populate-cepops
received_event_loc DEQUEUE PKTQUEUE 0 h1-h2
x LOOP insert_event_into_cepops 0 cepops cepops 0
#x TTWAKEUP packet_thread
0 STOP

SIGEND


THREADS
event_thread event_processing_thread infinite 0
packet_thread packet_processing_thread infinite 0
