#
# Lines starting with "#" are regarded as comments, and disregarded during parsing.
#
# The order of sections matter - they must be in the following order:
# QUEUES, HARDWARE, SYNCH, CONDITIONS, TRIGGERS,
# {SIGSTART ... SIGEND},
# THREADS
#

#############################################################################
############################### HEADER ######################################
#############################################################################

CEPENABLED

QUEUES
# Format: name
#	  queuing policy (only currently supported: "FIFO")
#	  size
#	  type of queued entries ("packet" or "service")
# order matters, since queue conditions work on sets of queues specified
# by the name of the first and the last queue

# BCM4430 TRS: http://linux-sunxi.org/images/0/05/4330-DS206-R.pdf
# Page 84, figure 34
# NIC Rx memory: 10kb
# NIC Tx memory: 32kb

HIRQ	            FIFO 	-1    services
# Queue for posted tasks
sq FIFO -1 services

# Bridge queues
from-CepOperatorProcessCepEvent FIFO -1 packets
from-ProcessCepEvent FIFO -1 packets
from-ScheduleSend FIFO -1 packets

HARDWARE
# Format: MEMBUS||PEU frequency [name if PEU] [scheduler if PEU] [trace overhead] [callback service queue]
PEU 4 cpu0 ns3::processing::RoundRobinScheduler 250 irq_enter HIRQ

SYNCH
# name type arguments
# type 0 is a semaphore
process_event_SEM 0 0

CONDITIONS

TRIGGERS
#BACKSERVICE service fsm ns3::TelosB  # We will call node->GetObject<ns3::TelosB>()->FSM when service is called. Object factory is used to setType to ns3::TelosB, perhaps?
LOC received_event_loc received_event

LOC process-or-cepop-loc loc-process-or-cepop
LOC process-and-cepop-loc loc-process-and-cepop
LOC process-then-cepop-loc loc-process-then-cepop
LOC process-cepop-loc loc-process-cepop

# Entrypoint function for the PEU defined above
SIGSTART
NAME irq_enter
PEU cpu
RESOURCES cycles normal
FRACTION 50%  1940 3880

0 START
x                      DEQUEUE		SRVQUEUE 0 HIRQ
0 STOP

SIGEND


SIGSTART
NAME process_received_packet
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x PROCESS 1000 0
0 STOP

SIGEND


SIGSTART
NAME receive-packet  # Wake up when packet is received
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND PacketsLeft read global 1
x PROCESS 1000 0
x CALL process_received_packet
x TTWAKEUP event_thread
0 STOP

SIGEND


SIGSTART
NAME HIRQ-1 # Receiving part
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x                  ENQUEUE		SRVQUEUE receive-packet sq
x TTWAKEUP packet_thread
0 STOP

SIGEND


SIGSTART
NAME send-packet
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x PROCESS 1000 0
0 STOP

SIGEND


SIGSTART
NAME HIRQ-2 # Sending part
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x                  ENQUEUE		SRVQUEUE send-packet sq
x TTWAKEUP packet_thread
0 STOP

SIGEND


SIGSTART
NAME process-packets
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 LOOPSTART		0 sq sq 0
#x QUEUECOND sq sq notempty
x CALL send-packet
x                      DEQUEUE		SRVQUEUE 0 0
0 RESTART

SIGEND


#SIGSTART
#NAME process-packets
#PEU cpu
#RESOURCES cycles normal
#FRACTION 100% 1 1
#
#0 LOOPSTART		0 sq sq 0
###x QUEUECOND sq sq empty
#x SLEEPTHREAD
#0 RESTART
#
#SIGEND


SIGSTART
NAME packet_processing_thread  # Wake up when packet is received and to be sent
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x LOOP process-packets 0 sq sq 0
x SLEEPTHREAD
0 STOP

SIGEND


SIGSTART
NAME handle-or-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
# x STATECOND SequencesLeft read global 1
# x STATECOND InsertedSequence read global 1
# x CALL handle-or-cepop
# x ELSEIF InsertedSequence read global 0
# x ENDIF
# x ENDIF
x STATECOND SequencesLeft read global 1
x STATECOND InsertedSequence read global 1
x CALL handle-or-cepop
0 STOP

SIGEND

SIGSTART
NAME handle-or-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND SequencesLeft read global 1
x STATECOND InsertedSequence read global 1
x CALL handle-or-cepop
0 STOP

SIGEND


SIGSTART
NAME handle-or-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND SequencesLeft read global 0
0 STOP

SIGEND


SIGSTART
NAME handle-and-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND SequencesLeft read global 1
x STATECOND InsertedSequence read global 1
x CALL handle-and-cepop
0 STOP

SIGEND

SIGSTART
NAME handle-and-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND SequencesLeft read global 1
x STATECOND InsertedSequence read global 1
x CALL handle-and-cepop
0 STOP

SIGEND


SIGSTART
NAME handle-and-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND SequencesLeft read global 0
0 STOP

SIGEND


SIGSTART
NAME handle-then-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND SequencesLeft read global 1
x STATECOND InsertedSequence read global 1
x CALL handle-then-cepop
0 STOP

SIGEND

SIGSTART
NAME handle-then-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND SequencesLeft read global 1
x STATECOND InsertedSequence read global 1
x CALL handle-then-cepop
0 STOP

SIGEND


SIGSTART
NAME handle-then-cepop
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND SequencesLeft read global 0
0 STOP

SIGEND


SIGSTART
NAME handle-cepops
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
#x DEQUEUE PKTQUEUE 0 h1-h2
x STATECOND CepOpsLeft read global 1
x STATECOND CepOpType read global 0
x CALL handle-or-cepop
x CALL handle-cepops
0 STOP

SIGEND

SIGSTART
NAME handle-cepops
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
#x DEQUEUE PKTQUEUE 0 h1-h2
x STATECOND CepOpsLeft read global 1
x DEQUEUE PKTQUEUE 0 h1-h2
x STATECOND CepOpType read global 1
x CALL handle-and-cepop
x CALL handle-cepops
0 STOP

SIGEND

SIGSTART
NAME handle-cepops
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
#x DEQUEUE PKTQUEUE 0 h1-h2
x STATECOND CepOpsLeft read global 1
x DEQUEUE PKTQUEUE 0 h1-h2
x STATECOND CepOpType read global 2
x CALL handle-then-cepop
x CALL handle-cepops
0 STOP

SIGEND


SIGSTART
NAME handle-cepops
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND CepOpsLeft read global 0
0 STOP

SIGEND


SIGSTART
NAME event_processing_thread
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND EventsLeft read global 0
x SLEEPTHREAD
0 STOP

SIGEND


SIGSTART
NAME event_processing_thread
PEU cpu
RESOURCES cycles normal
FRACTION 100% 1 1

0 START
x STATECOND EventsLeft read global 1
x PROCESS 1000 0
x CALL handle-cepops
0 STOP

SIGEND


THREADS
packet_thread packet_processing_thread infinite 0
event_thread event_processing_thread infinite 0
